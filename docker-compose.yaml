services:
  postgres:
    image: postgres:13.8-bullseye
    hostname: postgres
    container_name: postgres
    restart: always
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
      PGDATA: /var/lib/postgresql/data
    ports:
      - "5432:5432"
    volumes:
      - ./tmp/postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      retries: 5
  redis: 
    image: redis:6.0.16-bullseye
    hostname: redis
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - ./tmp/redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
  mongo:
    image: mongo:6.0.2-focal
    hostname: mongo
    container_name: mongo
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - ./tmp/mongo-data:/data/db
  neo:
    image: neo4j:5.1.0
    hostname: neo
    container_name: neo
    restart: always
    environment:
      - NEO4J_AUTH=none
      - NEO4J_server.bolt.advertised_address=neo:7687
    ports:
        - "7474:7474"
        - "7687:7687"
    volumes:
      - ./tmp/neo4j-data:/data

  pipeline-api:
    build:
      context: ./pipeline_api
      dockerfile: Dockerfile
    image: nmngo248/pipeline-api:latest
    container_name: pipeline-api
    ports:
      - "8000:8000"
    environment:
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB_STAGING=deng_staging
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - SNOWFLAKE_USERNAME=${SNOWFLAKE_USERNAME}
      - SNOWFLAKE_PASSWORD=${SNOWFLAKE_PASSWORD}
      - PYTHONUNBUFFERED=1
      - TZ=Europe/Paris
    hostname: pipeline-api
    depends_on:
      - mongo
      - postgres
      - redis

  postgres-airflow:
    container_name: postgres-airflow
    extends:
      file: airflow-compose.yaml
      service: postgres-airflow
  redis-airflow:
    container_name: redis-airflow
    extends:
      file: airflow-compose.yaml
      service: redis-airflow
  airflow-webserver:
    container_name: airflow-webserver
    extends:
      file: airflow-compose.yaml
      service: airflow-webserver
  airflow-scheduler:
    container_name: airflow-scheduler
    extends:
      file: airflow-compose.yaml
      service: airflow-scheduler
  airflow-worker:
    container_name: airflow-worker
    extends:
      file: airflow-compose.yaml
      service: airflow-worker  
  airflow-init:
    container_name: airflow-init
    profiles: ["init"]
    extends:
      file: airflow-compose.yaml
      service: airflow-init
  flower:
    container_name: airflow-flower
    extends:
      file: airflow-compose.yaml
      service: flower
  docker-socket-proxy:
    container_name: docker-socket-proxy
    extends:
      file: docker-socket-proxy.yaml
      service: docker-socket-proxy
networks:
  default:
    name: meteorif