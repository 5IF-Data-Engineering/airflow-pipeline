services:
  postgres:
    image: postgres:13.8-bullseye
    hostname: postgres
    container_name: postgres
    restart: always
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
      PGDATA: /var/lib/postgresql/data
    ports:
      - "5432:5432"
    volumes:
      - type: bind
        source: ./tmp/postgres-data
        target: /var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      retries: 5
  redis: 
    image: redis:6.0.16-bullseye
    hostname: redis
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - type: bind
        source: ./tmp/redis-data
        target: /data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
  mongo:
    image: mongo:6.0.2-focal
    hostname: mongo
    container_name: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
        - "27017:27017"
        - "27018:27018"
    volumes:
      - type: bind
        source: ./tmp/mongo-data
        target: /data/db
  neo:
    image: neo4j:5.1.0
    hostname: neo
    container_name: neo
    restart: always
    environment:
      - NEO4J_AUTH=none
      - NEO4J_server.bolt.advertised_address=neo:7687
    ports:
        - "7474:7474"
        - "7687:7687"
    volumes:
      - ./tmp/neo4j-data:/data

  zookeeper:
    container_name: zookeeper
    image: ubuntu/zookeeper:edge
    ports:
      - "2181:2181"

  kafka:
    container_name: kafka
    image: ubuntu/kafka:3.1-22.04_edge
    ports:
      - "9092:9092"
    environment:
      - TZ=UTC+2
      - ZOOKEEPER_HOST=zookeeper
      - ZOOKEEPER_PORT=2181
    hostname: kafka
    depends_on:
      - zookeeper

  event-streaming:
    build:
      context: ./event_streaming
      dockerfile: Dockerfile
    image: nmngo248/event-streaming:latest
    container_name: event-streaming
    ports:
      - "8000:8000"
    environment:
      - KAFKA_HOST=kafka
      - KAFKA_PORT=9092
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
      - MONGO_USERNAME=root
      - MONGO_PASSWORD=example
      - PYTHONUNBUFFERED=1
      - TZ=Europe/Paris
    hostname: event-streaming
    depends_on:
      - kafka
      - mongo

  # kafka-consumer:
  #   build: 
  #     context: ./kafka_consumer
  #     dockerfile: Dockerfile
  #   image: nmngo248/kafka-consumer:latest
  #   container_name: kafka-consumer
  #   ports:
  #     - "8001:8001"
  #   environment:
  #     - KAFKA_HOST=kafka
  #     - KAFKA_PORT=9092
  #     - POSTGRES_DB=postgres
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=None
  #     - POSTGRES_HOST=postgres
  #     - POSTGRES_PORT=5432
  #   depends_on:
  #     postgres:
  #       condition: service_healthy

  postgres-airflow:
    container_name: postgres-airflow
    extends:
      file: airflow-compose.yaml
      service: postgres-airflow
  redis-airflow:
    container_name: redis-airflow
    extends:
      file: airflow-compose.yaml
      service: redis-airflow
  airflow-webserver:
    container_name: airflow-webserver
    extends:
      file: airflow-compose.yaml
      service: airflow-webserver
  airflow-scheduler:
    container_name: airflow-scheduler
    extends:
      file: airflow-compose.yaml
      service: airflow-scheduler
  airflow-worker:
    container_name: airflow-worker
    extends:
      file: airflow-compose.yaml
      service: airflow-worker  
  airflow-init:
    container_name: airflow-init
    profiles: ["init"]
    extends:
      file: airflow-compose.yaml
      service: airflow-init
  flower:
    container_name: airflow-flower
    extends:
      file: airflow-compose.yaml
      service: flower
networks:
  default:
    name: meteorif